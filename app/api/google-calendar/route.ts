import { NextResponse } from "next/server"
import { google } from "googleapis"
import { createClient } from "@supabase/supabase-js"

const calendar = google.calendar("v3")

// Initialize Google Calendar with service account
const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY?.replace(/\\n/g, "\n"),
  },
  scopes: ["https://www.googleapis.com/auth/calendar"],
})

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabase = createClient(supabaseUrl || "", supabaseKey || "")

export async function POST(request: Request) {
  try {
    const { meetingId, startupName, meetingDate, meetingTime, duration = 60, attendees = [] } = await request.json()

    if (!meetingId || !startupName || !meetingDate) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 })
    }

    const authClient = await auth.getClient()
    google.options({ auth: authClient })

    // Create calendar event
    const startDateTime = new Date(`${meetingDate}T${meetingTime || "10:00"}:00`)
    const endDateTime = new Date(startDateTime.getTime() + duration * 60000)

    const event = {
      summary: `Orange Corners Meeting - ${startupName}`,
      description: `Program review meeting with ${startupName}\n\nGenerated by Orange Corners Platform`,
      start: {
        dateTime: startDateTime.toISOString(),
        timeZone: "UTC",
      },
      end: {
        dateTime: endDateTime.toISOString(),
        timeZone: "UTC",
      },
      attendees: attendees.map((email: string) => ({ email })),
      reminders: {
        useDefault: false,
        overrides: [
          { method: "email", minutes: 24 * 60 }, // 1 day before
          { method: "popup", minutes: 30 }, // 30 minutes before
        ],
      },
    }

    const response = await calendar.events.insert({
      calendarId: process.env.GOOGLE_CALENDAR_ID || "primary",
      requestBody: event,
    })

    // Update meeting with calendar info
    const { error: updateError } = await supabase
      .from("meetings")
      .update({
        google_calendar_event_id: response.data.id,
        calendar_link: response.data.htmlLink,
      })
      .eq("id", meetingId)

    if (updateError) {
      console.error("Failed to update meeting with calendar info:", updateError)
    }

    return NextResponse.json({
      success: true,
      eventId: response.data.id,
      calendarLink: response.data.htmlLink,
    })
  } catch (error) {
    console.error("Google Calendar error:", error)
    return NextResponse.json(
      {
        error: "Failed to create calendar event",
        details: error.message,
      },
      { status: 500 },
    )
  }
}
