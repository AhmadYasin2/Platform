generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_chat_messages {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id       String?           @db.Uuid
  role             String
  content          String
  metadata         Json?             @default("{}")
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  ai_chat_sessions ai_chat_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ai_chat_sessions {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startup_id       String?            @db.Uuid
  session_title    String?            @default("New Chat")
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  ai_chat_messages ai_chat_messages[]
  startups         startups?          @relation(fields: [startup_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model email_logs {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipient_email    String
  recipient_name     String?
  subject            String
  message_content    String?
  mailjet_message_id String?
  status             String?   @default("sent")
  sent_by            String?   @db.Uuid
  sent_at            DateTime? @default(now()) @db.Timestamptz(6)
  delivered_at       DateTime? @db.Timestamptz(6)
  opened_at          DateTime? @db.Timestamptz(6)
  metadata           Json?     @default("{}")
  profiles           profiles? @relation(fields: [sent_by], references: [id], onUpdate: NoAction)

  @@index([mailjet_message_id], map: "idx_email_logs_mailjet_id")
  @@index([recipient_email], map: "idx_email_logs_recipient")
  @@index([sent_at], map: "idx_email_logs_sent_at")
  @@index([status], map: "idx_email_logs_status")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meeting_summaries {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  meeting_id     String?   @db.Uuid
  public_summary String?
  private_notes  String?
  action_items   Json?     @default("[]")
  key_insights   Json?     @default("[]")
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  meetings       meetings? @relation(fields: [meeting_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model meetings {
  id                       String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startup_id               String?             @db.Uuid
  meeting_date             DateTime            @db.Date
  farah_notes              String?
  guest_notes              String?
  created_at               DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?           @default(now()) @db.Timestamptz(6)
  meeting_time             DateTime?           @db.Time(6)
  google_calendar_event_id String?
  calendar_link            String?
  meeting_summaries        meeting_summaries[]
  startups                 startups?           @relation(fields: [startup_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model packages {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_id       String?            @db.Uuid
  name             String
  description      String?
  price            Int
  hours            Int
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?          @default(now()) @db.Timestamptz(6)
  services         services?          @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  startup_services startup_services[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id                                     String       @id @db.Uuid
  email                                  String       @unique
  full_name                              String?
  role                                   user_role    @default(startup)
  created_at                             DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at                             DateTime?    @default(now()) @db.Timestamptz(6)
  email_logs                             email_logs[]
  users                                  users        @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  startups_startups_created_byToprofiles startups[]   @relation("startups_created_byToprofiles")
  startups_startups_user_idToprofiles    startups[]   @relation("startups_user_idToprofiles")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model services {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  packages    packages[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model startup_services {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  startup_id  String?   @db.Uuid
  package_id  String?   @db.Uuid
  hours_used  Int
  selected_at DateTime? @default(now()) @db.Timestamptz(6)
  packages    packages? @relation(fields: [package_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  startups    startups? @relation(fields: [startup_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([startup_id, package_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model startups {
  id                                     String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                   String
  founder_name                           String?
  email                                  String             @unique
  logo_url                               String?
  contract_status                        contract_status?   @default(Pending)
  total_credits                          Int?               @default(1000)
  used_credits                           Int?               @default(0)
  user_id                                String?            @db.Uuid
  created_by                             String?            @db.Uuid
  created_at                             DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                             DateTime?          @default(now()) @db.Timestamptz(6)
  status                                 String?            @default("active")
  marketplace_access                     Boolean?           @default(true)
  notification_email                     String?
  email_preferences                      Json?              @default("{\"service_updates\": true, \"meeting_reminders\": true, \"general_announcements\": true}")
  ai_chat_sessions                       ai_chat_sessions[]
  meetings                               meetings[]
  startup_services                       startup_services[]
  profiles_startups_created_byToprofiles profiles?          @relation("startups_created_byToprofiles", fields: [created_by], references: [id], onUpdate: NoAction)
  profiles_startups_user_idToprofiles    profiles?          @relation("startups_user_idToprofiles", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  password_hash String
  role          user_role @default(startup)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  profiles      profiles?
}

enum contract_status {
  Pending
  Sent
  Signed
}

enum user_role {
  manager
  startup
}
